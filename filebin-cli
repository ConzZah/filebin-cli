#!/usr/bin/env bash
  #=================================================
  # Project: filebin-cli
  # Author: ConzZah / 2024
  # Last Modification: 30.12.2024 / 02:25 [v0.2]
  #=================================================

wd="$HOME/filebin-cli_downloads"
mkdir -p "$wd" && cd "$wd"
t="~~~~~~~~~~~~~~~~"
# dependency checks:
! type -p curl >/dev/null && echo "CURL MISSING" && exit 1
! type -p grep >/dev/null && echo "GREP MISSING" && exit 1
! type -p sed >/dev/null && echo "SED MISSING" && exit 1
! type -p cut >/dev/null && echo "CUT MISSING" && exit 1
! type -p tr >/dev/null && echo "TR MISSING" && exit 1
init () {
# init variables
fb="https://filebin.net"; bin_id=""; exitcode=""
local_file=""; local_filename=""; remote_filename=""
bin_sha256sums=""; bin_total_size_readable=""; bin_filecount=""
bin_filenames=""; bin_creationdate_rel=""; bin_expirydate_rel=""; cleanup
}

get_bin_info () {
### arguably the most important function.
### its job is organizing and reformatting json output so we can parse it easier with tools like grep, sed, cut, etc..
cleanup; curl -fsSL -X "GET" "$fb/$bin_id" -H "accept: application/json" -o ".$bin_id.json" 
# organize relevant data into variables ( üíÄÔ∏è i refuse to use jq üíÄÔ∏è )

# globals:
creationdates_rel="$(grep -s "created_at_relative" ".$bin_id.json"| cut -d '"' -f 4)"
updated_at_rel="$(grep -s "updated_at_relative" ".$bin_id.json"| cut -d '"' -f 4)"
filesizes_readable="$(grep -s "bytes_readable" ".$bin_id.json"| cut -d '"' -f 4)"
filesizes_bytes="$(grep "bytes" ".$bin_id.json"|sed -e "/bytes_readable/d" -e "s#,##g"|tr -s " "|cut -b 11-)" # <-- for $filesizes_bytes we use sed to omit all lines containing "bytes_readable".

# bin meta:
bin_id="$(grep -s "id" ".$bin_id.json"| cut -d '"' -f 4)"
bin_expirydate_rel="$(grep -s "expired_at_relative" ".$bin_id.json"| cut -d '"' -f 4)"
bin_readonly="$(grep -s "readonly" ".$bin_id.json"| tr -s " "| cut -b 14-| sed 's#,##g')" # <-- bin_readonly will always return either true or false
bin_filecount="$(grep -s -m1 "files" ".$bin_id.json"| tr -s " "| cut -b 11-| sed 's#,##g')" # <-- bin_filecount will always return an integer
bin_total_size_readable="$(echo "$filesizes_readable"| sed -n '1p')"
bin_creationdate_rel="$(echo "$creationdates_rel"| sed -n '1p')"
bin_updatedate_rel="$(echo "$updated_at_rel"| sed -n '1p')"

# file meta:
bin_file_creationdate_rel="$(echo "$creationdates_rel"| sed '1d')"
bin_file_updatedate_rel="$(echo "$updated_at_rel"| sed '1d')"
bin_filesize_readable="$(echo "$filesizes_readable"| sed '1d')"
bin_filesize_bytes="$(echo "$filesizes_bytes"| sed '1d')"
bin_file_content_type="$(grep -s "content-type" ".$bin_id.json"| cut -d '"' -f 4)"
bin_filenames="$(grep -s "filename" ".$bin_id.json"| cut -d '"' -f 4)"
bin_sha256sums="$(grep -s "sha256" ".$bin_id.json"| cut -d '"' -f 4)"; check4error

# üõ∏Ô∏è reformat data üõ∏Ô∏è  ( so ":" becomes our universal delimiter. )

# this is helpful because we could do something like: cut -d ":" -f x,y,z "$bdex" / "$fdex"

# or for individual files: echo "$(grep "x" "$fdex"| cut -d ":" -f x,y,z)"

# üéÉÔ∏è ez üéÉÔ∏è

## we'll create two files:
fdex=".$bin_id-index.info"
bdex=".$bin_id-bin.info"

# we use sed to print the line specified by $i into our "$_current" vars
i="1"; while [ $i -le $bin_filecount ]; do 
sha256sum_current=""; sha256sum_current="$(echo "$bin_sha256sums"| sed -n "$i p")"
bin_filename_current=""; bin_filename_current="$(echo "$bin_filenames"| sed -n "$i p")"
bin_filesize_readable_current=""; bin_filesize_readable_current="$(echo "$bin_filesize_readable"| sed -n "$i p")"
bin_filesize_bytes_current=""; bin_filesize_bytes_current="$(echo "$bin_filesize_bytes"| sed -n "$i p")"
bin_file_creationdate_rel_current=""; bin_file_creationdate_rel_current="$(echo "$bin_file_creationdate_rel"| sed -n "$i p" )"
bin_file_updatedate_rel_current=""; bin_file_updatedate_rel_current="$(echo "$bin_file_updatedate_rel"| sed -n "$i p")"
bin_file_content_type_current=""; bin_file_content_type_current="$(echo "$bin_file_content_type"| sed -n "$i p")"

# $fdex  =    :sha265s:filenames:filesize_readable:filesize_bytes:creationdate_rel:updated_rel:content_type:
# fields:          2        3             4            5              6               7             8
echo ":$sha256sum_current:$bin_filename_current:$bin_filesize_readable_current:$bin_filesize_bytes_current:$bin_file_creationdate_rel_current:$bin_file_updatedate_rel_current:$bin_file_content_type_current:" >> "$fdex" # <-- reformat
((i++)); done

# $bdex  =    :bin_id:total_size:filecount:readonly:expirydate_rel:creationdate_rel:updatedate_rel:
# fields:         2        3        4           5           6              7             8
 echo ":$bin_id:$bin_total_size_readable:$bin_filecount:$bin_readonly:$bin_expirydate_rel:$bin_creationdate_rel:$bin_updatedate_rel:" > "$bdex"

### IMPORTANT ###
# if "$remote_filename" is set to anything, try to grep the definitive result:
# (this allows you to only type out part of a filename and have it still be matched, if it should exist.)
# (we basically achieved semi-autocompletion for $remote_filename with this one üóøÔ∏è)
[ ! -z "$remote_filename" ] && remote_filename="$(grep "$remote_filename" "$fdex"| cut -d ":" -f 3)"
}

upload_to_bin () {
get_bin_info 
x="upload"
# before we go any further, verify that the file we are trying to upload exists.
[ -z "$local_file" ] && echo "ERROR: SPECIFY THE PATH TO A FILE AND TRY AGAIN." && quit # <-- if user enters nothing, echo error and exit
[ ! -f "$local_file" ] && echo "ERROR: '$local_file' DOESN'T EXIST OR IS A DIRECTORY." && quit ||: # <-- if the file doesn't exist we echo error and exit. 

# upload sequence
local_filename="$(basename "$local_file")" # <-- get basename of the file we want to upload
echo -e "\nUPLOADING '$local_filename' TO '$fb/$bin_id"
curl -fsSL -X "POST" "$fb/$bin_id/$local_filename" -H "accept: application/json" -H "Content-Type: application/octet-stream" --data-binary @"$local_file"
verify_sha256sum
}

download_from_bin () {
get_bin_info
x="download"
dlmsg="DOWNLOADING $remote_filename"
# if "$remote_filename is empty, assume the user wants to download the whole bin in zip format:
[ -z "$remote_filename" ] && remote_filename="zip"
# if the user specified nothing (or zip / tar) after dl, prepare to download the whole bin in chosen format:
if [[ "$remote_filename" =~ ^(zip|tar)$ ]]; then fb="$fb/archive"; dlmsg="DOWNLOADING ENTIRE BIN.."; echo ":$bin_id.tar:$bin_id.zip:" >> "$fdex"; fi 

verify_remote_filename_existence
echo "$dlmsg"; curl -fsSL -O "$fb/$bin_id/$remote_filename" # <-- actual download of the file.
# if user downloaded the bin in archive format, we can't compare checksums, so we exit early here.
if [[ "$fb" == *"/archive" ]]; then mv "$remote_filename" "$bin_id.$remote_filename"; quit; fi
verify_sha256sum
}

verify_remote_filename_existence () {
# (failsafe for individual files) we check if $remote_filename is found in $fdex.
if [[ "$remote_filename" != "$(grep -o "$remote_filename" "$fdex")" ]]; then 
echo -e "ERROR: THE FILE: \"$remote_filename\" DOESN'T EXIST @ "$fb/$bin_id" \n--> ${x^^} CANCELED."; quit; fi
}

verify_sha256sum () { 
# tries to verify that uploads or downloads aren't fragmented by comparing two sha256sums
# we define _x twice because sha256sum must have the full filepath to create a checksum. ( _x = filename, _X = filepath )
[[ "$x" == "upload" ]] && _x="$local_filename" && _X="$local_file" # <-- if we upload, x = local
[[ "$x" == "download" ]] && _x="$remote_filename" && _X="$_x" # <-- if we download, x = remote
sleep 0.7; get_bin_info; echo -e "\nCOMPARING HASHES.."
sha256sum "$_X"|cut -d " " -f 1 > .local_checksum # <-- create local checksum
remote_sha256=""; remote_sha256="$(grep -s "$_x" "$fdex"|cut -d ":" -f 2)"; echo "$remote_sha256" > .remote_checksum # <-- fetch remote checksum 
### ü§ñÔ∏è ARE YOU READY FOR DIFF https://www.youtube.com/watch?v=DJ6CcEOmlYU&t12s ü§ñÔ∏è ###
diff -q .local_checksum .remote_checksum >/dev/null && echo -e "\n ‚úîÔ∏è SHA256sums MATCH! ${x^^} SUCCESSFUL ‚úîÔ∏è " && quit || echo -e "\n ‚úñÔ∏è ERROR: SHA256sums DON'T MATCH. ${x^^}ED DATA FRAGMENTED ‚úñÔ∏è " && quit
}

ls_bin () {
x="ls"
get_bin_info
# (default)
# if $remote_filename is empty run default ls: 
[ -z "$remote_filename" ] && echo -e "\nFILES: $bin_filecount - TOTAL SIZE: $bin_total_size_readable - READ-ONLY: $bin_readonly" && \
echo -e "$t$t$t$t$t \n<FNAME> - <FSIZE> - <FTYPE>\n$t$t" && cut --output-delimiter " - " -d ":" -f 3,4,8 "$fdex" && echo -e "$t$t$t$t$t \n$fb/$bin_id \nthis bin expires $bin_expirydate_rel"

# (single file)
# if the user specified a filename after ls, check if the requested file exists and show its metadata:
[ ! -z "$remote_filename" ] && verify_remote_filename_existence && echo -e "$t$t$t$t$t\nNAME: $remote_filename \nSIZE: "$(grep "$remote_filename" "$fdex"| cut -d ":" -f 4)" \
\nSIZE (in bytes): "$(grep "$remote_filename" "$fdex"| cut -d ":" -f 5)"\nCREATED: "$(grep "$remote_filename" "$fdex"| cut -d ":" -f 6)" \nUPDATED: "$(grep "$remote_filename" "$fdex"| cut -d ":" -f 7)" \nSHA256: "$(grep "$remote_filename" "$fdex"| cut -d ":" -f 2)" \nURL: $fb/$bin_id/$remote_filename \n$t$t$t$t$t"
}

lock_bin () {
get_bin_info
# asks if you want to put the bin in read-only mode (defaults to no)
echo -e "\nWARNING! \n\nDO YOU REALLY WANT TO LOCK THE BIN: $bin_id ?\n\nTHIS CAN'T BE UNDONE! \n"
read -r -p "[Y/N] " yn; case $yn in 
y|Y) curl -fsSL -X "PUT" "$fb/$bin_id" -H "accept: application/json" && echo "$fb/$bin_id IS NOW READ-ONLY."; quit ;; 
n|N) echo "LOCK CANCELED"; quit ;; *) echo "LOCK CANCELED"; quit
esac
}

delete_bin () {
get_bin_info
# asks if you want to delete the entire bin (defaults to no)
echo -e "\nWARNING! \n\nDO YOU REALLY WANT TO DELETE THE ENTIRE BIN: \""$bin_id"\" ?\n\nTHIS CAN'T BE UNDONE! \n"
read -r -p "[Y/N] " yn; case $yn in
y|Y) curl -fsSL -X "DELETE" "$fb/$bin_id" -H "accept: application/json"; quit ;; 
n|N) echo "DELETE CANCELED"; quit ;; *) echo "DELETE CANCELED"; quit
esac
}

delete_file () {
get_bin_info; verify_remote_filename_existence
# asks if you want to delete a single file from the bin (also defaults to no)
echo -e "\nWARNING! \n\nDO YOU REALLY WANT TO DELETE THE FILE: \"$remote_filename\" ?\n\nTHIS CAN'T BE UNDONE! \n"
read -r -p "[Y/N] " yn; case $yn in
y|Y) curl -fsSL -X "DELETE" "$fb/$bin_id/$remote_filename" -H "accept: application/json"; quit ;; 
n|N) echo "DELETE CANCELED"; quit ;; *) echo "DELETE CANCELED"; quit
esac
}

qr_bin () { 
# gets qr-code containing the bin url as .png and saves it.
curl -fsSL -X "GET" "$fb/qr/$bin_id" -H "accept: image/png" -o "QR-$bin_id.png" ; echo "QR-CODE SAVED"
# if one happens to have qrencode installed, show qr-code right in the terminal:
type -p qrencode >/dev/null && echo -e "\n$fb/$bin_id\n$t$t~~~~" && echo "$fb/$bin_id"| qrencode -t utf8
}

check4error () {
# basic errorchecking using exit codes and conditions
exitcode="$?" # <-- write exit code of last command to variable
[ "$exitcode" != "0" ] && echo "EXIT CODE: $exitcode" && quit; exitcode="" # <-- if errorcode is anything else than 0, print the captured exit code and exit
[ -z "$bin_expirydate_rel" ] && echo "ERROR: BIN DOESN'T EXIST" && quit # <-- if no expirydate was found (because there should ALWAYS be one unless the url is invalid) exit
}

show_help () { 
echo -e "\n      /// filebin-cli v0.2 // Author: ConzZah ¬©Ô∏è 2024 // LICENSE: MIT /// 
\nOPTIONS:\n
ls, list             list files in bin\n
u, ul, upload        upload files to bin\n
d, dl, download      download files from bin\n
l, lock              lock bin\n
del, delete          delete entire bin or single file\n
qr                   generate a qr-code with the bin url\n
USAGE: ./filebin-cli <FILEBIN ID/URL> OPTION <PATH/TO/FILE>\n"
}

cleanup () { rm -f .*.json .*-index.info .*-bin.info .local_checksum .remote_checksum ;}

quit () { cleanup; exit ;} # <-- clean up old files & exit  

###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ######

# ( $1 refers to filebin id / url, $2 to option, and $3 refers to filepath / name )

init

## filebin url handling
# if $1 has any value and contains the filebin url, get rid of it with sed, so only the bin_id remains, & use set to reassign positional parameters
[ -n "$1" ] && [[ "$1" == "$fb"* ]] && formatted_bin_id="$(echo "$1"| sed "s#"$fb"/##g")" && set -- "$formatted_bin_id" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
[ -n "$1" ] && bin_id="$1" ||: # <-- in any case, "$1" will be assigned to $bin_id

### OPTIONS ###

if [[ "$2" =~ ^(ls|LS|list)$ ]]; then remote_filename="$3" && ls_bin; quit; fi 
if [[ "$2" =~ ^(d|D|dl|DL|download)$ ]]; then remote_filename="$3"; download_from_bin; quit; fi
if [[ "$2" =~ ^(u|U|ul|UL|upload)$ ]]; then local_file="$3"; upload_to_bin; quit; fi # <-- $local_file holds full path.
if [[ "$2" =~ ^(l|L|lock|LOCK)$ ]]; then lock_bin; quit; fi
if [[ "$2" =~ ^(del|DEL|delete|DELETE)$ ]]; then x="delete"; [ -z "$3" ] && delete_bin && quit || remote_filename="$3" && delete_file; quit; fi # <-- if the user specified no filename, assume they want to delete the bin (in both cases, the user is asked.)
if [[ "$2" =~ ^(qr|QR)$ ]]; then qr_bin; quit; fi

### END OF OPTIONS ###
[ ! -z "$1" ] && show_help && quit || [ -z "$1" ] && show_help && quit 

###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ###### launch ######
